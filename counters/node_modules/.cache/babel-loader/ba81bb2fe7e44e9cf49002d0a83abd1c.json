{"remainingRequest":"D:\\study\\unline\\week3\\day3\\counters\\node_modules\\babel-loader\\lib\\index.js!D:\\study\\unline\\week3\\day3\\counters\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\study\\unline\\week3\\day3\\counters\\src\\store\\store.js","dependencies":[{"path":"D:\\study\\unline\\week3\\day3\\counters\\src\\store\\store.js","mtime":1567505954248},{"path":"D:\\study\\unline\\week3\\day3\\counters\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\study\\unline\\week3\\day3\\counters\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\study\\unline\\week3\\day3\\counters\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nexport default {\n  strict: true,\n  state: {\n    type: 0,\n    counters: [{\n      value: 0\n    }, {\n      value: 0\n    }, {\n      value: 0\n    }],\n    countersTotal: 0\n  },\n  getters: {\n    counterSum: function counterSum(state) {\n      var sum = 0;\n      state.counters.forEach(function (element) {\n        sum = sum + element.value;\n      });\n      return sum;\n    }\n  },\n  mutations: {\n    minusValue: function minusValue(state, index) {\n      state.counters[index].value--;\n      state.countersTotal--;\n    },\n    plusValue: function plusValue(state, index) {\n      state.counters[index].value++;\n      state.countersTotal++;\n    }\n  }\n};",{"version":3,"sources":["D:\\study\\unline\\week3\\day3\\counters\\src\\store\\store.js"],"names":["strict","state","type","counters","value","countersTotal","getters","counterSum","sum","forEach","element","mutations","minusValue","index","plusValue"],"mappings":";AAAA,eAAe;AACbA,EAAAA,MAAM,EAAC,IADM;AAEbC,EAAAA,KAAK,EAAG;AACNC,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,QAAQ,EAAG,CACT;AAACC,MAAAA,KAAK,EAAC;AAAP,KADS,EAET;AAACA,MAAAA,KAAK,EAAC;AAAP,KAFS,EAGT;AAACA,MAAAA,KAAK,EAAC;AAAP,KAHS,CAFL;AAONC,IAAAA,aAAa,EAAC;AAPR,GAFK;AAWbC,EAAAA,OAAO,EAAG;AACRC,IAAAA,UAAU,EAAE,oBAACN,KAAD,EAAS;AACnB,UAAIO,GAAG,GAAG,CAAV;AACAP,MAAAA,KAAK,CAACE,QAAN,CAAeM,OAAf,CAAuB,UAAAC,OAAO,EAAI;AAChCF,QAAAA,GAAG,GAAGA,GAAG,GAAGE,OAAO,CAACN,KAApB;AACD,OAFD;AAGA,aAAOI,GAAP;AACD;AAPO,GAXG;AAoBbG,EAAAA,SAAS,EAAE;AACTC,IAAAA,UADS,sBACEX,KADF,EACQY,KADR,EACe;AACtBZ,MAAAA,KAAK,CAACE,QAAN,CAAeU,KAAf,EAAsBT,KAAtB;AACAH,MAAAA,KAAK,CAACI,aAAN;AACD,KAJQ;AAKTS,IAAAA,SALS,qBAKCb,KALD,EAKOY,KALP,EAKc;AACrBZ,MAAAA,KAAK,CAACE,QAAN,CAAeU,KAAf,EAAsBT,KAAtB;AACAH,MAAAA,KAAK,CAACI,aAAN;AACD;AARQ;AApBE,CAAf","sourcesContent":["export default {\r\n  strict:true,\r\n  state : {\r\n    type: 0,\r\n    counters : [\r\n      {value:0},\r\n      {value:0},\r\n      {value:0}\r\n    ],\r\n    countersTotal:0\r\n  },\r\n  getters : {\r\n    counterSum: (state)=>{\r\n      let sum = 0;\r\n      state.counters.forEach(element => {\r\n        sum = sum + element.value;\r\n      });\r\n      return sum;\r\n    },\r\n  },\r\n  mutations: {\r\n    minusValue(state,index) {\r\n      state.counters[index].value--;\r\n      state.countersTotal--;\r\n    },\r\n    plusValue(state,index) {\r\n      state.counters[index].value++;\r\n      state.countersTotal++;\r\n    }\r\n  }\r\n\r\n}"]}]}